//====================================================================/
//　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　/
// artisoc                                                            /
//                                                                    /
//====================================================================/

Version = 4.0;



//-------------------------------------------------------
// Component Tree
//-------------------------------------------------------
UNIVERSE {
    Space map(0,0),Square_2D(100, 170, !Loop, North, 1, Map_3D){
        AgtType insect(0, 0)[1] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) <2>  As Double = ();
            Dim Y(0, 0) <2>  As Double = (0.0);
            Dim Z(0, 0) <2>  As Double = ();
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
            Dim Angle(0, 0) As Double = (0.0);
            Dim next_vector(0, 0)[3][3][3] As Double = (27*0.0);
            Dim forward_vector(0, 0)[3] As Double = (3*0.0);
            Dim base_vector(0, 0)[3] As Double = (3*0.0);
            Dim angle_surface(0, 0) As Double = (0.0);
            Dim b_type(0, 0) As Integer = (0);
            Dim matrix(0, 0)[3][3][3] As Double = (27*0.0);
            Dim normal_vector(0, 0)[3] As Double = ();
            Dim tmp_position(0, 0)[3] As Double = ();
        }
        AgtType barrier(0, 0)[0] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) As Double = (0.0);
            Dim Y(0, 0) As Double = (0.0);
            Dim Z(0, 0) As Double = (0.0);
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
            Dim Angle(0, 0) As Double = (0.0);
        }
        Dim fin(0, 0)[100][170][1] As Integer = (17000*0);
        AgtType camera(0, 0)[1] {
            Dim ID(0, 0) As Integer = (0);
            Dim X(0, 0) As Double = (0.0);
            Dim Y(0, 0) As Double = (0.0);
            Dim Z(0, 0) As Double = (0.0);
            Dim Layer(0, 0) As Integer = (0);
            Dim Direction(0, 0) As Double = (0.0);
            Dim Angle(0, 0) As Double = (0.0);
        }
        Dim is_void(0, 0)[100][170][1] As Boolean = (17000*0);
    }
    Dim CameraPointer(0, 0) As Agt = (0);
    Dim num_fin(0, 0) As Integer = (0);
}


//-------------------------------------------------------
// Agent Variable Initial Data
//-------------------------------------------------------
Initial_Value {
    UNIVERSE.MAP.IS_VOID = 1(17000*0);
    UNIVERSE.MAP.INSECT.X = 1(0.0);
    UNIVERSE.MAP.INSECT.Y = 1(0.0);
    UNIVERSE.MAP.INSECT.Z = 1(0.0);
    UNIVERSE.MAP.INSECT.LAYER = 1(0);
    UNIVERSE.MAP.INSECT.DIRECTION = 1(0.0);
    UNIVERSE.MAP.INSECT.ANGLE = 1(0.0);
    UNIVERSE.MAP.INSECT.NEXT_VECTOR = 1(27*0.0);
    UNIVERSE.MAP.INSECT.FORWARD_VECTOR = 1(3*0.0);
    UNIVERSE.MAP.INSECT.BASE_VECTOR = 1(3*0.0);
    UNIVERSE.MAP.INSECT.ANGLE_SURFACE = 1(0.0);
    UNIVERSE.MAP.INSECT.B_TYPE = 1(0);
    UNIVERSE.MAP.INSECT.MATRIX = 1(27*0.0);
    UNIVERSE.MAP.INSECT.NORMAL_VECTOR = 1(2*0.0, 1.0);
    UNIVERSE.MAP.INSECT.TMP_POSITION = 1(3*0.0);
}


//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE
Univ_Init{
	ClearConsoleScreen()
	make_rubble_mix(0.01)
	println("start")
}

Univ_Step_Begin{

}

Univ_Step_End{

}

Univ_Finish{

}

sub make_rubble_mix(rate as Double){
	dim tmp_rate as Double
	dim tmp_number as Integer
	dim max as Integer
	dim height as Integer
	dim width as Integer
	dim x as integer
	dim y as integer
	dim z as integer
	dim r as Double
	dim pattern as Integer

	tmp_rate = 0
	tmp_number = 0
	height = GetHeightSpace(universe.map)
	width = GetWidthSpace(universe.map)
	max = height * width * 16

	Do While tmp_rate < rate
		x = Int(Rnd() * (width))
		y = Int(Rnd() * (height))
		z = Int(Rnd() * (16))
		pattern = Int(Rnd() * 3)
		r = Rnd() * 100
		if r < 33 then
			tmp_number = tmp_number + make_rubble_board(pattern,x,y,z)
		elseif r < 66 then
			tmp_number = tmp_number + make_rubble_box(x,y,z)
		else
			tmp_number = tmp_number + make_rubble_Pillar(pattern,x,y,z)
		end if		
		tmp_rate = tmp_number / max
	Loop
}

function make_rubble_board(pattern as Integer, x as Integer, y as integer ,z as integer)as Integer{
	dim t as Integer
	dim a as Integer
	dim b as Integer
	dim c as Integer
	dim one as Agt
	dim set as AgtSet
	dim temp as AgtSet
	dim ret as Integer

	ret = 64
	set = CreateAgtMulti(universe.map.barrier,64)
	if pattern == 0 and x<= GetWidthSpace(universe.map) -8 and y <= GetHeightSpace(universe.map) - 8 then //水平に置く
		for each one in set
			t = GetAgtEntry(set,one)
			c = t / 8
			b = t Mod 8
			MakeOneAgtSetAroundPosition(temp,universe.map,x+b,y+c,0,0,universe.map.barrier)
			if is_void(temp,z) then
				one.X = x + b
				one.Y = y + c
				one.Z = z
				universe.map.is_void(one.x,one.y,one.z) = true
			else
				KillAgt(one)
				ret = ret - 1
			end if
		next one
	elseif pattern == 1 and y <= GetHeightSpace(universe.map) - 8 and z <= 16 - 8 then // 縦長に置く
		for each one in set
			t = GetAgtEntry(set,one)
			a = t / 8
			b = t Mod 8
			MakeOneAgtSetAroundPosition(temp,universe.map,x,y+b,0,0,universe.map.barrier)
			if is_void(temp,z+a) then
				one.X = x
				one.Y = y + b
				one.Z = z + a
				universe.map.is_void(one.x,one.y,one.z) = true
			else
				KillAgt(one)
				ret = ret - 1
			end if
		next one
	elseif pattern == 2 and x<= GetWidthSpace(universe.map) -8 and z <= 16 - 8 then // 横長に置く
		for each one in set
			t = GetAgtEntry(set,one)
			a = t / 8
			b = t Mod 8
			MakeOneAgtSetAroundPosition(temp,universe.map,x+b,y,0,0,universe.map.barrier)
			if is_void(temp,z+a) then
				one.X = x + b
				one.Y = y
				one.Z = z + a
				universe.map.is_void(one.x,one.y,one.z) = true
			else
				KillAgt(one)
				ret = ret - 1
			end if
		next one
	else
		ret = 0
	end if

	return ret
}

function make_rubble_box(x as Integer,y as integer, z as integer)as Integer{
	dim t as Integer
	dim a as Integer
	dim b as Integer
	dim c as Integer
	dim one as Agt
	dim set as AgtSet
	dim temp as AgtSet
	dim ret as integer

	ret = 64
	MakeOneAgtSetAroundPosition(temp,universe.map,x,y,0,0,universe.map.barrier)
	set = CreateAgtMulti(universe.map.barrier,64)
	if x <= GetWidthSpace(universe.map) - 4 and y <= GetHeightSpace(universe.map) - 4 and z <= 16 - 4 then
		if CountAgtSet(temp) == 0 then
			for each one in set
				t = GetAgtEntry(set,one)
				a = t  / 16 
				b = t Mod (16)
				c = b / 4
				b = b Mod 4
 				MakeOneAgtSetAroundPosition(temp,universe.map,x+b,y+c,0,0,universe.map.barrier)
 				if is_void(temp,z+a) then
		  		one.X = x + b
		  		one.Y = y + c
		  		one.Z = z + a
		  		universe.map.is_void(one.x,one.y,one.z) = true
		  	else
					KillAgt(one)
					ret = ret - 1		  		
		  	end if		  	
			next one
		 end if
		else
			ret = 0
		end if

		return ret
}

function make_rubble_Pillar(pattern as Integer,x as Integer,y as integer ,z as integer)as Integer{
	dim set as AgtSet
	dim a as Integer
	dim b as Integer
	dim one as agt
	dim temp as AgtSet
	dim t as Integer
	dim c as Integer
	dim ret as Integer

	ret = 64
	MakeOneAgtSetAroundPosition(temp,universe.map,x,y,0,0,universe.map.barrier)
	set = CreateAgtMulti(universe.map.barrier,64)
	if pattern == 0 and x <= GetWidthSpace(universe.map) - 16 and y <= GetHeightSpace(universe.map) - 2 and z <= 16 -2  then
	//横長の柱を作る
		if CountAgtSet(temp) == 0 then
			for each one in set
				t = GetAgtEntry(set,one)
	  		a = t  / 32 
	  		b = t Mod (32)
	  		c = b / 16
	  		b = b Mod 16
 				MakeOneAgtSetAroundPosition(temp,universe.map,x+b,y+c,0,0,universe.map.barrier)
 				if is_void(temp,z+a) then
		  		one.X = x + b
		  		one.Y = y + c
		  		one.Z = z + a
		  		universe.map.is_void(one.x,one.y,one.z) = true
		  	else
					KillAgt(one)
					ret = ret - 1		  		
		  	end if
	  	next one
	  end if	 
	elseif pattern == 1 and x <= GetWidthSpace(universe.map) - 2 and y <= GetHeightSpace(universe.map) - 16 and z <= 16 -2 then
	//縦長の柱を作る
		if CountAgtSet(temp) == 0 then
  		for each one in set
  			t = GetAgtEntry(set,one)
  			a = t  / 32 
  			b = t Mod (32)
  			c = b / 2
  			b = b Mod 2
 				MakeOneAgtSetAroundPosition(temp,universe.map,x+b,y+c,0,0,universe.map.barrier)
 				if is_void(temp,z+a) then
	  			one.X = x + b
 		 			one.Y = y + c
 		 			one.Z = z + a
 		 			universe.map.is_void(one.x,one.y,one.z) = true
 		 		else
					KillAgt(one)
					ret = ret - 1		  	 		 		
 		 		end if
  		next one
  	end if
  elseif pattern == 2 and x <= GetWidthSpace(universe.map) - 2 and y <= GetHeightSpace(universe.map) - 2 and z <= 16 - 16 then //立ってる柱を作る
		if CountAgtSet(temp) == 0 then
  		for each one in set
  			t = GetAgtEntry(set,one)
  			a = t  / 4 
  			b = t Mod (4)
  			c = b / 2
  			b = b Mod 2
 				MakeOneAgtSetAroundPosition(temp,universe.map,x+b,y+c,0,0,universe.map.barrier)
 				if is_void(temp,z+a) then
	  			one.X = x + b
 		 			one.Y = y + c
 		 			one.Z = z + a
 		 			universe.map.is_void(one.x,one.y,one.z) = true
 		 		else
					KillAgt(one)
					ret = ret - 1		  	 		 		
 		 		end if
  		next one
  	end if  
  else
  	ret = 0
	end if

	return ret
}

function is_void(tmp as AgtSet,z as Integer)as Boolean{
	dim one as Agt
	dim ret as Boolean

	ret = true
	if CountAgtSet(tmp) == 0 then
		ret = true
	else
		for each one in tmp
			if one.Z == z then
				ret = false
				break
			end if
		next one
	end if

	return ret
}
#end_rule UNIVERSE




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.MAP.INSECT
Include "bend.inc"
Include "vector.inc"
Include "surface.inc"
Include "calculate.inc"

Agt_Init{
my.Direction = rnd() * 360
}

Agt_Step{
	if different_surface() then
		determining_vector()
	else
		if is_bend() then
			determining_bend()
		end if
	end if
	forward_step()
}


sub forward_step() {

	step_direction()
	
	Do Until step_direction()
		my.tmp_position(0) = my.X
		my.tmp_position(1) = my.Y
		my.tmp_position(2) = my.Z
		back_step()
	Loop
}

sub step_direction(){
	my.X = my.X + my.forward_vector(0)
	my.Y = my.Y + my.forward_vector(1)
	my.Z = my.Z + my.forward_vector(2)

}

function is_step() as Boolean{
	dim nx as Integer
	dim ny as Integer
	dim nz as Integer
	dim diff_x as Double
	dim diff_y as Double
	dim diff_z as Double
	dim ret as Boolean
		
	nx = Int(my.X)
	ny = Int(my.Y)
	nz = Int(my.Z)

	diff_x = my.X - nx
	diff_y = my.y - ny
	diff_z = my.z - nz

	if diff_x >= 0.5 then
		nx = nx + 1
	end if
	if diff_y >= 0.5 then
		ny = ny + 1
	end if			
	if diff_z >= 0.5 then
		nz = nz + 1
	end if

	if my.X > nx then
		if my.Y > ny then	
			if my.Z > nz then
				if universe.map.is_void(nx+1,ny,nz) or universe.map.is_void(nx,ny+1,nz) or universe.map.is_void(nx,ny,nz+1) then
					ret = false
				else
					ret = true
				end if
			else
				if universe.map.is_void(nx+1,ny,nz) or universe.map.is_void(nx,ny+1,nz) or universe.map.is_void(nx,ny,nz-1) then
					ret = false
				else
					ret = true
				end if
			end if
		else
			if my.Z > nz then
				if universe.map.is_void(nx+1,ny,nz) or universe.map.is_void(nx,ny-1,nz) or universe.map.is_void(nx,ny,nz+1) then
					ret = false
				else
					ret = true
				end if
			else
				if universe.map.is_void(nx+1,ny,nz) or universe.map.is_void(nx,ny-1,nz) or universe.map.is_void(nx,ny,nz-1) then
					ret = false
				else
					ret = true
				end if
			end if		
		end if
	else
		if my.Y > ny then	
			if my.Z > nz then
				if universe.map.is_void(nx-1,ny,nz) or universe.map.is_void(nx,ny+1,nz) or universe.map.is_void(nx,ny,nz+1) then
					ret = false
				else
					ret = true
				end if
			else
				if universe.map.is_void(nx-1,ny,nz) or universe.map.is_void(nx,ny+1,nz) or universe.map.is_void(nx,ny,nz-1) then
					ret = false
				else
					ret = true
				end if
			end if
		else
			if my.Z > nz then
				if universe.map.is_void(nx-1,ny,nz) or universe.map.is_void(nx,ny-1,nz) or universe.map.is_void(nx,ny,nz+1) then
					ret = false
				else
					ret = true
				end if
			else
				if universe.map.is_void(nx-1,ny,nz) or universe.map.is_void(nx,ny-1,nz) or universe.map.is_void(nx,ny,nz-1) then
					ret = false
				else
					ret = true
				end if
			end if		
		end if	
	end if	

	return ret
}

sub back_step(){
	dim nx as Integer
	dim ny as Integer
	dim nz as Integer
	dim diff_x as Double
	dim diff_y as Double
	dim diff_z as Double
	dim pre_x as Double
	dim pre_y as Double
	dim pre_z as Double
	dim u(3) as Double
	dim k(3) as Double
		
	pre_x = my.tmp_position(0)
	pre_y = my.tmp_position(1)
	pre_z = my.tmp_position(2)

	u(0) = my.X - pre_x
	u(1) = my.y - pre_y
	u(2) = my.z - pre_z

	nx = Int(my.X)
	ny = Int(my.Y)
	nz = Int(my.Z)

	diff_x = my.X - nx
	diff_y = my.y - ny
	diff_z = my.z - nz

	if diff_x >= 0.5 then
		nx = nx + 1
	end if
	if diff_y >= 0.5 then
		ny = ny + 1
	end if			
	if diff_z >= 0.5 then
		nz = nz + 1
	end if

	k(0) = ( nx - my.X ) / u(0)
	k(1) = ( ny - my.y ) / u(1)
	k(2) = ( nz - my.z ) / u(2)

	if k(0) >= 1 then
		k(0) = 0
	elseif k(1) >= 1 then
		k(1) = 0
	elseif k(2) >= 2 then
		k(2) = 0
	end if

	if k(0) < k(1) and k(1) < k(2) then
		my.X = pre_x + k(2) * u(0)
		my.y = pre_x + k(2) * u(1)
		my.z = pre_x + k(2) * u(2)
	elseif k(0) < k(2) and k(2) < k(1) then
		my.X = pre_x + k(1) * u(0)
		my.y = pre_x + k(1) * u(1)
		my.z = pre_x + k(1) * u(2)
	elseif k(1) < k(0) and k(0) < k(2) then
		my.X = pre_x + k(2) * u(0)
		my.y = pre_x + k(2) * u(1)
		my.z = pre_x + k(2) * u(2)
	elseif k(1) < k(2) and k(2) < k(0) then
		my.X = pre_x + k(0) * u(0)
		my.y = pre_x + k(0) * u(1)
		my.z = pre_x + k(0) * u(2)
	elseif k(2) < k(0) and k(0) < k(1) then
		my.X = pre_x + k(1) * u(0)
		my.y = pre_x + k(1) * u(1)
		my.z = pre_x + k(1) * u(2)
	else			
		my.X = pre_x + k(0) * u(0)
		my.y = pre_x + k(0) * u(1)
		my.z = pre_x + k(0) * u(2)
	end if
}


sub determining_bend(){
	dim degree as double

	degree = NormInv(Rnd(),0,30) + my.Direction
	
}
#end_rule UNIVERSE.MAP.INSECT




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.MAP.BARRIER
Agt_Init{

}

Agt_Step{

}
#end_rule UNIVERSE.MAP.BARRIER




//-------------------------------------------------------
// Agent Rule
//-------------------------------------------------------
#begin_rule UNIVERSE.MAP.CAMERA
Agt_Init{

}

Agt_Step{
	my.X = universe.map.insect(0).X -2
	my.Y = universe.map.insect(0).Y
	my.Z = universe.map.insect(0).Z+2
#end_rule UNIVERSE.MAP.CAMERA




//-------------------------------------------------------
// Simulation Definition Division
//-------------------------------------------------------
Single_Simulation {
    Step_Max = 0;
    Time_Max = 0;
    End_Condition = "";
    Exec_Wait = 0;
    Exec_Wait_Max = 1000;
    Random_Generator = Java_Standard;
    Exec_Order = Random;
    Exec_Order_Random_First_Step_Only = No;
    Random_Seed = 0;
    Redraw_Timing = Step;
    Redraw_Interval = 1;
    Garbage_Interval = 0;
}


//-------------------------------------------------------
// Simulation Loop Definition Division
//-------------------------------------------------------
Repeat_Simulation {
    Value_Change = None;
    Initial_Value_Change_None {
        Repeat_Max = 1;
    }
}


//-------------------------------------------------------
// 2 Dimension Map Display Definition Division
//-------------------------------------------------------
Map_Output {
    Map_Space_Name = "Universe.map";
    Map_Name = "map";
    Title = "map";
    Disable = No;
    Background_Color = 255, 255, 255;
    Position_x = 879;
    Position_y = 0;
    Size_x = 840;
    Size_y = 910;
    Map_Cell_Size = 1;
    Remarks = Yes;
    Legend_Pos = Top;
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    FastDraw = Yes;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Axis_Label = "", "";
    Draw_Range = 0, 0, 100, 170;
    Ruled_Line = No;
    Text_Display = No;
    Text_Display_Variable_Name = "";
    Chess_Type_Display_Position = Yes;
    Background_Transparent = No;
    Target_Layer = 0;
    Coordinate_Display = No;
    Space_Kind = Square_2D;
    BG_Pict = No;
    BG_Type = 0;
    BG_Var_Name = "";
    BG_File_Name = "";
    Origin_Position = 2;
    Output_Group_Name = "";
    Output {
        Map_Element_Name = "insect";
        Map_Element = Agent_Variable;
        Output_Expression = "Universe.map.insect";
        Draw_Line = No;
        Collection_Name = "";
        Line_Type = 0;
        Line_Arrow = 0;
        Line_Width = 0;
        Line_Color = 0, 0, 0;
        Line_Type_Variable = "";
        Line_Arrow_Variable = "";
        Line_Width_Variable = "";
        Line_Color_Variable = "";
        Agent_Color = 255,0,0;
        Marker_Id = 1;
        Effective_Figures = 0;
        Format_Id = 0;
        Agent_Image_Direction = No;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "";
        Num_Display = No;
        Num_Var_Name = "";
        Agent_Image_Magnify_by_value = Yes;
        Agent_Image_Magnify_Value = 1.0;
        Agent_Image_Magnify_Variable_Name = "Universe.map.insect.ID";
        Agent_Image_Transparency_by_value = Yes;
        Agent_Image_Transparency_Value = 0.0;
        Agent_Image_Transparency_Variable_Name = "Universe.map.insect.ID";
    }
    Output {
        Map_Element_Name = "barrier";
        Map_Element = Agent_Variable;
        Output_Expression = "Universe.map.barrier";
        Draw_Line = No;
        Collection_Name = "";
        Line_Type = 0;
        Line_Arrow = 0;
        Line_Width = 0;
        Line_Color = 0, 0, 0;
        Line_Type_Variable = "";
        Line_Arrow_Variable = "";
        Line_Width_Variable = "";
        Line_Color_Variable = "";
        Agent_Color = 0,0,255;
        Marker_Id = 2;
        Effective_Figures = 0;
        Format_Id = 0;
        Agent_Image_Direction = No;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "";
        Num_Display = No;
        Num_Var_Name = "";
        Agent_Image_Magnify_by_value = Yes;
        Agent_Image_Magnify_Value = 1.0;
        Agent_Image_Magnify_Variable_Name = "Universe.map.barrier.ID";
        Agent_Image_Transparency_by_value = Yes;
        Agent_Image_Transparency_Value = 0.0;
        Agent_Image_Transparency_Variable_Name = "Universe.map.barrier.ID";
    }
    Output {
        Map_Element_Name = "fin";
        Map_Element = Space_Variable;
        Output_Expression = "Universe.map.fin";
        Space_Color_Direct_RGB = No;
        Space_Draw_Range = 0.0, 1.0;
        Space_Color_Min = 255, 255, 255;
        Space_Color_Max = 204, 204, 0;
        Marker_Id = 6;
        Icon_Type = 0;
        Icon_Var_Name = "";
        Icon_Transparent = No;
        Icon_Enlarg_Reduce = No;
        Icon_File_Name = "";
        Num_Display = No;
        Num_Var_Name = "";
        Space_Variable_Transparency_by_value = Yes;
        Space_Variable_Transparency_Value = 0.0;
        Space_Variable_Transparency_Variable_Name = "Universe.map.fin";
    }
}


//-------------------------------------------------------
//  3 Dimension Map Display Definition Division
//-------------------------------------------------------
Map3D_Output {
    Map3D_Name = "map";
    Disable = Yes;
    Background_Image_Display = No;
    Background_Image_Type = Fixed_Value;
    Background_Image_Folder_Name = "";
    Background_Image_Folder_Variable_Name = Dummy;
    Background_Color = -1;
    FastDraw = Yes;
    Line_Display = No;
    Camera_Position_Type = Mouse;
    Camera_Position_Agent_Name = Universe.CameraPointer;
    Light_Position_Type = Coordinate;
    Light_Position = 0.0,0.0,0.0;
    Light_Position_Agent_Name = Dummy;
    Output_Group_Name = "";
    Font_Name = "Dialog";
    Font_Char_Set = 81;
    Font_Size = 12.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 255, 255, 255;
    Position_x = 7;
    Position_y = -4;
    Size_x = 840;
    Size_y = 910;
    Map_Cell_Size = -1;
    Draw_Timing = Simulation_Step;
    Draw_Interval = 1;
    Space3D_Output {
        Space_3D_Name = "map";
        Space_Path_Name = Universe.map;
        Layer = 0;
        Space_3D_PositionD = 0.0,0.0,0.0;
        Ruled_Line_Display = Yes;
        Origin_Position = Left_Top;
        Display_Object_Type = None;
        Image_File_Path_Name = "";
        Model_3D_File_Path_Name = "";
        Agent3D_Output {
                Agent_3D_Name = "insect";
                Agent_Path_Name = Universe.map.insect;
                Display_Object_Type = Image_File;
                Display_Object_Image_Id = Sphere_Prism;
                Model_3D_File_Path_Name = "";
                Color_Type = None;
                Color_Value = -65536;
                Color_Variable_Path_Name = Universe.map.insect.ID;
                Smooth_Movement = No;
                Draw_line = No;
                Line_AgtSet_Variable_Path_Name = "";
                Line_Type = 1;
                Line_Type_Variable_Path_Name = "";
                Line_Arrow = 1;
                Line_Arrow_Variable_Path_Name = "";
                Line_Color = -16777216;
                Line_Color_Variable_Path_Name = "";
                Magnify_Value = 1.0;
                Magnify_Variable_Path_Name = "";
        }
        Agent3D_Output {
                Agent_3D_Name = "barrier";
                Agent_Path_Name = Universe.map.barrier;
                Display_Object_Type = Image_File;
                Display_Object_Image_Id = Quadrartic_Prism;
                Model_3D_File_Path_Name = "";
                Color_Type = None;
                Color_Value = -16777012;
                Color_Variable_Path_Name = Universe.map.barrier.ID;
                Smooth_Movement = No;
                Draw_line = No;
                Line_AgtSet_Variable_Path_Name = "";
                Line_Type = 1;
                Line_Type_Variable_Path_Name = "";
                Line_Arrow = 1;
                Line_Arrow_Variable_Path_Name = "";
                Line_Color = -16777216;
                Line_Color_Variable_Path_Name = "";
                Magnify_Value = 1.0;
                Magnify_Variable_Path_Name = "";
        }
    }
}


//-------------------------------------------------------
// Control Panel Definition Division
//-------------------------------------------------------
Control_Panel {
    Display_Area = 0, 0, 136, 49;
    Display_Type = 0;
}


//-------------------------------------------------------
// Space Initial Value Definition Divsion
//-------------------------------------------------------
Space_Initial {
}


//-------------------------------------------------------
// Other Miscellaneous Data Definition Division
//-------------------------------------------------------
Others_Data {
    Indent = 4;
    Rule_Colored = Yes;
    Rule_LineNo = Yes;
    Window_Hide_Run = 1;
    Debug_Position_x = 75;
    Debug_Position_y = 75;
    Debug_Size_x = 400;
    Debug_Size_y = 200;
    Console_Position_x = 801;
    Console_Position_y = -9;
    Console_Size_x = 607;
    Console_Size_y = 620;
    Componen_Tree_Position_x = 840;
    Componen_Tree_Position_y = 0;
    Componen_Tree_Size_x = 840;
    Componen_Tree_Size_y = 303;
    Console_Background_Color = 16777215;
    Console_Foreground_Color = 255;
    Console_DisplayLines_Max = 500;
    plug_in_module_name = "";
    Font_Name = "Dialog";
    Font_Char_Set = 0;
    Font_Size = 14.0;
    Font_Style = 0;
    Font_Color = 0, 0, 0;
    Font_Background_Color = 0, 0, 0;
}


//-------------------------------------------------------
// Network Information Definition Division
//-------------------------------------------------------
Network_Info {
    Global_Space_Area = 0, 0, 100, 100;
    Local_Space_Info {
    }
}


//-------------------------------------------------------
// Window Location Definition Division
//-------------------------------------------------------
Window_Rectangle {
    Window_Name = Main_Window, -8, -8, 1696, 1026;
    Window_Name = Output_Setting_Window, 623, 338, 480, 350;
    Window_Name = Artisoc_Help_Window, 10, 10, 1435, 385;
    Window_Name = Map_3D_Setting_Window, 508, 263, 680, 500;
    Window_Name = Space_3D_Setting_Window, 623, 243, 450, 540;
}


//-------------------------------------------------------
// Help Favorite Division
//-------------------------------------------------------
Help_Favorite {
}
